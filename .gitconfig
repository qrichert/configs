[user]
	name = Quentin Richert
	email = <>
[core]
	editor = nvim
[init]
	defaultBranch = main
[checkout]
	defaultRemote = origin
[color]
	branch = auto
	diff = auto
	status = auto
[diff]
	colorMoved = default
[pull]
	rebase = true
[merge]
	tool = nvimdiff
[mergetool]
	prompt = false
[mergetool "nvimdiff"]
	layout = LOCAL,MERGED,REMOTE
; [blame]
; 	ignoreRevsFile = .git-blame-ignore-revs
[url "git@github.com:"]
	insteadOf = gh:
[url "ssh://misc/~/"]
	insteadOf = misc:
[alias]
	a = add .
	br = branch
	ci = commit
	eci = commit --allow-empty
	c = commit -a --allow-empty-message --no-edit
	co = checkout
	conf = config --global --edit
	df = diff
	hdf = diff HEAD
	sdf = diff --stat HEAD
	cdf = diff --cached
	wdf = diff --color-words
	chdf = diff --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'
	fixup = commit -a --fixup
	fx = commit -a --fixup HEAD
	lp = log --patch
	lg = log --color --graph --abbrev-commit --pretty=format:'%C(yellow)%h%Creset%C(bold red)%d%Creset %s %C(bold green)(%ci) %C(bold blue)<%an>%Creset'
	ll = log --oneline --graph
	lclean = log --oneline --graph --pretty=format:'%C(yellow)%h%Creset %s %C(bold blue)<%an>%Creset'
	llfp = log --oneline --graph --first-parent
	lme = log --oneline --decorate=auto --author='Quentin Richert'
	p = push
	pf = push --force
	rb = rebase
	rbic = rebase --interactive --rebase-merges --autosquash --committer-date-is-author-date
	rs = restore
	rt = reset
	st = status
	sw = switch
	pick = cherry-pick
	count-lines = "! git log --author=\"$1\" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }' #"
	changelog = tag -n9999999 --sort=-v:refname
	# https://stackoverflow.com/questions/8475448/find-merge-commit-which-includes-a-specific-commit
	find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
	show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
